#!/usr/bin/env node
/* eslint-disable no-process-exit */
/* eslint-disable node/shebang */

/**
 * Module dependencies.
 */
const http = require('http');
const { info } = require('console');

const app = require('../app');
const dbInit = require('../config/db');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (Number.isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
    const addr = server.address();
    const bind =
        typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    info(`Listening on ${bind}`);
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');

const server = http.createServer(app);

app.set('port', port);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Create HTTP server.
 */
dbInit.dbInit((err) => {
    if (err) {
        console.error('Failed to connect to database\n', err);
        throw err;
    }
    server.listen(port);
    server.on('error', onError);
    server.on('listening', () => onListening(server));
});
